require "rails_helper"

# NOTE:  remove header comment as we implement the tests

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vendors" do
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
    {
      folio_id: "7842df10-f041-481d-b80f-c403b39aebdd",
      folio_code: "SFSYMPHONY-SUL",
      name: "San Francisco Symphony",
      highlight: false
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes valid for your model")
    {
      folio_id: "not a uuid",
      folio_code: "",
      name: nil,
      highlight: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Vendor.create! valid_attributes
      get vendors_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "is successful when vendor is in database", skip: "need a view" do
      vendor = create(:vendor)
      skip "TODO: write this when there is a view"
      get vendor_url(vendor.folio_id)
      expect(response).to be_successful
    end

    it "throws ActiveRecord::RecordNotFound when vendor doesn't exist", skip: "need a view" do
      expect { get vendor_url("not-a-uuid") }.to raise_error(ActiveRecord::RecordNotFound, "Couldn't find Vendor with 'id'=not-a-uuid")
    end
  end
end
